<script src='/socket.io/socket.io.js'></script>
<script>
    var webconfig = './config/webconfig.json';
    var request = new XMLHttpRequest();
    request.open('GET', webconfig);
    request.responseType = 'json';
    request.send();
    let socket;
    request.onload = function () {
        let config = request.response;
        socket = io.connect(config.address + ':' + config.port);
        socket.on('replaydata', (datas) => {
            let splitdata = datas.split('\n');
            let list = [];
            splitdata.forEach(element => {
                if (element !== '') {
                    let splitElement = element.split(' ');
                    if (splitElement[0] === getUserName() && splitElement[4] === getPdfName()) {
                        // if(splitElement[0] === getUserName()){

                        // if (splitElement[1].slice(0, 1) === 'M') {
                        //     list.push(splitElement);
                        // } else if (splitElement[1].slice(0, 1) === 'Q') {
                        //     list.push(splitElement);
                        // } else if (splitElement[1].slice(0, 1) === 'L') {
                        //     list.push(splitElement);
                        //     // console.log(list);
                        //     // list = [];
                        //     makeReplayData(list);
                        //     list = [];
                        // }
                        makeReplayData(splitElement);
                    }
                    // console.log(splitElement);
                    // makeReplayData(splitElement);
                }
            });
        });
        if (getUserName() === 'teacher') {

            socket.on('limit_set_teacher', function (pageNum, text) {
                console.log(text);
                make(pageNum, text);
            });
            socket.on('teacher', function (data, oCoords, pageNum, identifier, text) {
                // console.log(identifier);
                // console.log(data);
                console.log(text);
                // make(data, oCoords,pageNum, identifier,text);
                make(pageNum, text);
                // Canvas.add(data);
            });
        }
    }
    function sendObject(obj, oCoords, pageNum, ident, text, time) {
        // console.log(text);
        socket.emit('object', getUserName(), obj, obj.canvas.freeDrawingBrush.color, oCoords, pageNum, ident, text, getPdfName(), time);
    }
    function sendUserName(name, myIP) {
        socket.emit('userName',name, myIP);
    }
    function send(dist, obj, oCoords, pageNum, ident, text, time) {
        socket.emit(dist, obj);
    }
    function sendLimit(limit) {
        socket.emit('limit', limit,pageNum);
    }

    function sendAnnotation(obj, pageNum, time) {
        socket.emit('annotation', getUserName(), obj, obj.canvas.freeDrawingBrush.color, pageNum, getPdfName(), time);

    }

    function removeObject(obj, oCoords, pageNum, text, ident, time) {
        console.log(obj.stroke);
        socket.emit('remove', getUserName(), obj, obj.stroke, oCoords, pageNum, text, ident, getPdfName(), time);
    }

    function sendTrans(ident,pageNum){
        socket.emit('pageTrans',getUserName(),ident,pageNum,getPdfName(),getNowTime());
    }

    window.addEventListener('beforeunload', function (e) {
        if (getUserName() !== 'teacher') {
            socket.emit('reload', getUserName());
            socket.emit('clear', getUserName(), pageNum);
        } else {
            socket.emit('reload', getUserName());
        }
    })

    function clearObject(pageNum) {
        socket.emit('clear', getUserName(), pageNum);
    }

    function getData(startTime,endTime) {
        replayflag = true;
        socket.emit('getdata', getUserName(), getPdfName(),startTime,endTime);
    }

</script>