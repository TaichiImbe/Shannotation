<script src='/socket.io/socket.io.js'></script>
<script>
    var webconfig = './config/webconfig.json';
    var request = new XMLHttpRequest();
    request.open('GET',webconfig);
    request.responseType = 'json';
    request.send();
    let socket;
    request.onload = function(){
        let config = request.response;
        socket = io.connect(config.address+':'+config.port);
        socket.on('replaydata',(datas)=>{
            let splitdata = datas.split('\n');
            let list = [];
            splitdata.forEach(element => {
                if(element !== ''){
                    let splitElement = element.split(' ');
                    if(splitElement[0] === getUserName() && splitElement[4] === getPdfName() ){
                        // if(splitElement[0] === getUserName()){

                        if(splitElement[1].slice(0,1) === 'M'){
                            list.push(splitElement);
                        }else if(splitElement[1].slice(0,1) === 'Q'){
                            list.push(splitElement);
                        }else if(splitElement[1].slice(0,1) === 'L'){
                            list.push(splitElement);
                        // console.log(list);
                        // list = [];
                            makeReplayData(list);
                            list=[];
                        }
                    }
                    // console.log(splitElement);
                    // makeReplayData(splitElement);
                }
            });
        });
    }
    function send(dist,obj,oCoords,pageNum,ident,text,time){
        if(dist == 'object'){
            // console.log(text);
            socket.emit(dist,getUserName(),obj,obj.canvas.freeDrawingBrush.color,oCoords,pageNum,ident,text,getPdfName(),time);
        }else if(dist == 'userName'){
            console.log(oCoords);
            socket.emit(dist,obj,oCoords);
        }else if(dist === 'annotation'){
            socket.emit(dist,getUserName(),obj,obj.canvas.freeDrawingBrush,pageNum,getPdfName(),time);

        }else{
            socket.emit(dist,obj);
        }
    }

    function sendAnnotation(obj,pageNum,time){
            socket.emit('annotation',getUserName(),obj,obj.canvas.freeDrawingBrush.color,pageNum,getPdfName(),time);

    }

    function removeObject(obj,oCoords,pageNum,text,ident,time){
        console.log(obj.canvas);
        socket.emit('remove',getUserName(),obj,obj.stroke,oCoords,pageNum,text,ident,getPdfName(),time);
    }

    window.addEventListener('beforeunload',function(e){
        socket.emit('reload',getUserName());
        socket.emit('clear',getUserName(),pageNum);
    })

    function clearObject(pageNum){
        socket.emit('clear',getUserName(),pageNum);
    }

    function getData(){
        replayflag = true;
        socket.emit('getdata',getUserName(),getPdfName());
    }
    if(getUserName === 'teacher'){

        socket.on('limit_set_teacher',function(pageNum,text){
            console.log(text);
            make(pageNum,text);
        });
        socket.on('teacher', function (data, oCoords, pageNum, identifier, text) {
          // console.log(identifier);
          // console.log(data);
          console.log(text);
          // make(data, oCoords,pageNum, identifier,text);
          make(pageNum, text);
          // Canvas.add(data);
        });
    }

</script>